{
  "scopeName": "source.micufunction",
  "fileTypes": [
    "micufunction"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#commands"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "#.*",
          "name": "comment.line.micufunction"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "match": "\\b(function|duration|else)\\b",
          "name": "keyword.control.micufunction"
        },
        {
          "match": "\\b(wait|command|say|camera)\\b",
          "name": "entity.name.function.micufunction"
        },
        {
          "match": "(?<=function\\s)[\\w/:]+(?=\\s*{)",
          "name": "entity.name.method.micufunction"
        },
        {
          "name": "meta.command.micufunction",
          "begin": "^\\s*(command) ([a-z]*)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.micufunction"
            },
            "2": {
              "name": "keyword.control.micufunction"
            }
          },
          "end": "$",
          "patterns": [
            {
              "begin": "(?<= )",
              "end": "[ \\n]",
              "contentName": "meta.command.token.micufunction",
              "patterns": [
                {
                  "include": "source.mcfunction#command.tokens"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.conditional.micufunction",
          "begin": "\\b(if|unless)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.micufunction"
            }
          },
          "end": "(?=(if|unless|\\{))",
          "patterns": [
            {
              "include": "#execute_if_subcommands"
            }
          ]
        },
        {
          "match": "\\{[^}]*\\}",
          "name": "meta.block.micufunction"
        },
        {
          "match": "(?<=say\\s)<[^>]+>",
          "name": "entity.name.tag.micufunction"
        },
        {
          "match": "\\b(\\d+[st])\\b",
          "name": "constant.numeric.time.micufunction"
        },
        {
          "match": "(?<=goto\\s)\\S+(?=\\s+\\S+\\s+\\S+)",
          "name": "support.function.position.micufunction"
        },
        {
          "match": "\\b\\d+\\.\\d+\\b",
          "name": "constant.numeric.float.micufunction"
        },
        {
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.micufunction"
        }
      ]
    },
    "execute_if_subcommands": {
      "patterns": [
        {
          "name": "execute.if.biome.micufunction",
          "begin": "\\b(biome)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.micufunction"
            }
          },
          "end": "(?=(if|unless|\\{))",
          "patterns": [
            {
              "begin": "\\s(\\d+\\s\\d+\\s\\d+)\\s",
              "beginCaptures": {
                "1": {
                  "name": "constant.numeric.micufunction"
                }
              },
              "end": "(?=(if|unless|\\{))",
              "patterns": [
                {
                  "match": "\\b[a-z_:]+\\b",
                  "name": "entity.name.function.micufunction"
                }
              ]
            }
          ]
        },
        {
          "name": "execute.if.entity.micufunction",
          "begin": "\\b(entity)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.micufunction"
            }
          },
          "end": "(?=(if|unless|\\{))",
          "patterns": [
            {
              "include": "#target_selector"
            }
          ]
        },
        {
          "name": "execute.if.score.matches.micufunction",
          "begin": "\\b(score)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.micufunction"
            }
          },
          "end": "([\\w_\\.]+) (matches) ([\\d\\.]+) (?=(if|unless|\\{))",
          "endCaptures": {
            "1": {
              "name": "string.unquoted.micufunction"
            },
            "2": {
              "name": "entity.name.micufunction"
            },
            "3": {
              "name": "constant.numeric.micufunction"
            }
          },
          "patterns": [
            {
              "include": "#target_selector"
            }
          ]
        }
      ]
    },
    "target_selector": {
      "patterns": [
        {
          "name": "entity.name.tag.micufunction",
          "match": "\\s[\\w_#-]+\\s"
        },
        {
          "include": "source.mcfunction#command.token.selector_with_arguments"
        },
        {
          "include": "source.mcfunction#command.token.selector_without_arguments"
        }
      ]
    }
  }
}