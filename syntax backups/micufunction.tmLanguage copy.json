{
  "scopeName": "source.micufunction",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#commands"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "#.*",
          "name": "comment.line.micufunction"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "match": "\\b(function|duration|if|else)\\b",
          "name": "keyword.control.micufunction"
        },
        {
          "match": "\\b(wait|command|say|camera)\\b",
          "name": "entity.name.function.micufunction"
        },
        {
          "match": "(?<=function\\s)[\\w/:]+(?=\\s*{)",
          "name": "entity.name.method.micufunction"
        },
        {
          "name": "meta.command.micufunction",
          "begin": "^\\s*command\\s",
          "beginCaptures": {
            "1": {
              "name": "source.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "source.mcfunction"
            }
          ]
        },
        {
          "match": "\\{[^}]*\\}",
          "name": "meta.block.micufunction"
        },
        {
          "match": "(?<=say\\s)<[^>]+>",
          "name": "entity.name.tag.micufunction"
        },
        {
          "match": "\\b(\\d+[st])\\b",
          "name": "constant.numeric.time.micufunction"
        },
        {
          "match": "(?<=goto\\s)\\S+(?=\\s+\\S+\\s+\\S+)",
          "name": "support.function.position.micufunction"
        },
        {
          "match": "\\b\\d+\\.\\d+\\b",
          "name": "constant.numeric.float.micufunction"
        },
        {
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.micufunction"
        }
      ]
    }
  }
}